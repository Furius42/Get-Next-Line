Ah, I see! You need to avoid using `realloc()` and instead use `malloc()` for memory allocation, and you're thinking of using a **linked list** to store the buffers. Additionally, you need to manage multiple file descriptors, so a static structure will be necessary to track each file descriptor’s state.

### Let's break down the solution:

#### 1. **Using `malloc()` instead of `realloc()`**:
You can allocate memory for a new chunk each time you read a buffer, then link these chunks together in a **linked list**. Each node of the list will hold a portion of the file's data.

#### 2. **Linked List Approach**:
Each node will represent a buffer (read from the file), and you’ll append the data to the final line using the linked list. This way, you can handle large lines that exceed the size of the buffer.

#### 3. **Managing Multiple File Descriptors**:
You will need a **static struct** to store:
- The file descriptor (`fd`).
- A pointer to track the start of the next line (this will act like a cursor or offset in the file for each file descriptor).

### Strategy Overview:
1. **Linked List for Buffer Chunks**: Store each read buffer (or portion of the line) in a linked list.
2. **Static Struct for File Descriptor Management**: Use the static structure to track the file descriptor and the current position for each file.
3. **Reading in Chunks**: Each call to `get_next_line()` reads a chunk from the file, stores it in the linked list, and checks if a newline is encountered.
4. **Construct the Line**: Once a newline is found (or EOF), concatenate the linked list chunks to form the complete line.

### Let's dive into the structure:

### **1. Static Struct to Track Each File Descriptor**:
You'll need a structure to keep track of the **current file descriptor** and **the start of the next line** (the position of the file cursor).

```c
typedef struct s_fd {
    int fd;             // File descriptor
    char *next_line;    // Pointer to the start of the next line
} t_fd;

// Static array to store states for multiple file descriptors
static t_fd file_states[1024];  // assuming we can handle up to 1024 open files
```

### **2. Linked List for Buffer Chunks**:
Each node will represent a buffer read from the file. You can store the contents in the `content` field, and the size of the read chunk in `size`.

```c
typedef struct s_buffer {
    char *content;           // The content of the buffer (part of the line)
    size_t size;             // Number of characters in the content
    struct s_buffer *next;   // Pointer to the next buffer node
} t_buffer;
```

### **3. `get_next_line()` Implementation**:

Here’s how you can handle the logic of reading the file and constructing a line, while using the static structure to track each file descriptor’s state.

```c
#include <unistd.h>
#include <stdlib.h>
#include <fcntl.h>
#include <string.h>

#define BUFFER_SIZE 42  // Define your buffer size

// Static struct to track multiple file descriptors
static t_fd file_states[1024];  // You can adjust this based on your system limitations

// Function to handle the reading and storing of chunks into a linked list
char *get_next_line(int fd) {
    static t_fd file_state;  // Static state for the current file descriptor
    t_buffer *buffer_head = NULL;  // Head of the linked list of buffers
    t_buffer *buffer_tail = NULL;  // Tail of the linked list
    char temp_buffer[BUFFER_SIZE];
    size_t total_read = 0;
    size_t line_len = 0;
    int found_newline = 0;

    // Initialize file state if this is the first time
    if (file_state.fd != fd) {
        file_state.fd = fd;
        file_state.next_line = NULL;
    }

    // Loop to read the file and store the chunks in the linked list
    while (!found_newline) {
        // Read the next chunk from the file
        ssize_t bytes_read = read(fd, temp_buffer, BUFFER_SIZE);
        
        // If no more data to read, or error
        if (bytes_read <= 0) {
            break;
        }

        // Create a new buffer node and copy the data into it
        t_buffer *new_buffer = malloc(sizeof(t_buffer));
        if (!new_buffer) return NULL;

        new_buffer->content = malloc(bytes_read + 1);  // +1 for the null terminator
        if (!new_buffer->content) {
            free(new_buffer);
            return NULL;
        }
        
        memcpy(new_buffer->content, temp_buffer, bytes_read);
        new_buffer->content[bytes_read] = '\0';  // Null terminate the chunk
        new_buffer->size = bytes_read;
        new_buffer->next = NULL;

        // Link the new buffer into the list
        if (buffer_tail) {
            buffer_tail->next = new_buffer;
        } else {
            buffer_head = new_buffer;  // First node
        }
        buffer_tail = new_buffer;  // Update tail pointer

        // Check for newline character in the chunk
        for (size_t i = 0; i < bytes_read; i++) {
            if (temp_buffer[i] == '\n') {
                found_newline = 1;
                line_len = i + 1;  // Include the newline character
                break;
            }
        }

        total_read += bytes_read;
    }

    // Allocate memory for the final line
    char *line = malloc(line_len + 1);
    if (!line) return NULL;
    
    // Copy the contents of the linked list into the final line
    size_t current_pos = 0;
    t_buffer *current = buffer_head;
    while (current && line_len > current_pos) {
        size_t to_copy = current->size;
        if (line_len - current_pos < to_copy) {
            to_copy = line_len - current_pos;
        }
        memcpy(line + current_pos, current->content, to_copy);
        current_pos += to_copy;
        current = current->next;
    }

    line[line_len] = '\0';  // Null-terminate the line

    // Free the linked list buffers
    while (buffer_head) {
        t_buffer *temp = buffer_head;
        buffer_head = buffer_head->next;
        free(temp->content);
        free(temp);
    }

    return line;  // Return the read line
}
```

### **How It Works**:
1. **File Descriptor State**: We store the state for each file descriptor in `file_state`. It tracks which file descriptor we're working with and the pointer to the start of the next line.
   
2. **Linked List of Buffers**: For each `get_next_line()` call, we read from the file into `temp_buffer`. If the buffer is full (or not empty), we store it as a node in the linked list. Each node contains a chunk of the line.

3. **Constructing the Line**: Once we find the newline character, we know the line is complete. We copy the contents of all the buffers in the linked list into a dynamically allocated line, terminating it with a `\0`.

4. **Memory Management**: After the line is created, the function frees all the linked list nodes to avoid memory leaks.

### **Considerations**:
- **Multiple File Descriptors**: The static structure can handle multiple open files, assuming a file descriptor mapping is established.
- **Memory Allocation**: We allocate memory for each chunk read from the file, and we only use `malloc()` — no `realloc()` is used.

### Conclusion:
You’re on the right path using a linked list to manage buffer chunks and avoid reallocation. This approach allows you to efficiently handle large lines and manage multiple file descriptors simultaneously. Would you like to dive deeper into any specific part of the code?
